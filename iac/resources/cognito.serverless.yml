Resources:
    # Create Identity User Pool
    IdentityUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${env:IDENTITY_USER_POOL}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
          EmailSubjectByLink: Confirm your Freed@ account
          EmailMessageByLink:
            Fn::Join:
              - ""
              - - '<html><body>Dear Freed@ Identity, <Br><h4>Welcome to the Freed@ Community</h4><BR>Thank you for registering as a Identity, complete your registration by clicking the link below to verify your email address.<br><a href="'
                - https://${env:UI_DOMAIN}/verify
                - '/IdentityEmailVerification?{##Verify Email##}">Verify</a></p><br>Thanks from the Freed@ Team <Br></body></html>'
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: false
            Required: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
    # Create Identity App Client
    IdentityUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service.name}-${self:provider.stage}-identity-client
        GenerateSecret: false
        CallbackURLs:
          - https://${env:UI_DOMAIN}/home # Adjust if ever using federated identity provider
        LogoutURLs:
          - https://${env:UI_DOMAIN}/logout # Adjust if ever using federated identity provider
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: IdentityUserPool
    ## Identity domain name
    IdentityUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${env:UI_DOMAIN} 
        CustomDomainConfig:
          CertificateArn: ${cf.us-east-1:${env:STAGE}-us-east-1-${env:APP_NAME}-stack.UiCert}
        UserPoolId:
          Ref: IdentityUserPool

               
    # IdentityWebsitev6:
    #   Type: AWS::Route53::RecordSetGroup
    #   Properties:
    #     HostedZoneId: ${env:HOSTED_ZONE_ID}
    #     RecordSets:
    #       - Name: ${env:UI_DOMAIN}
    #         Type: AAAA
    #         AliasTarget:
    #           HostedZoneId: Z2FDTNDATAQYW2 #Special AWS id required for this to work
    #           DNSName: 
    #             Fn::GetAtt:
    #             - IdentityUserPoolDomain
    #             - DistributionDomainName
    # Identity authorizer
    # IdentityApiGatewayAuthorizer:
    #   Type: AWS::ApiGateway::Authorizer
    #   Properties:
    #     AuthorizerResultTtlInSeconds: 10
    #     IdentitySource: method.request.header.Authorization
    #     Name: Identity-pool-authorizer
    #     RestApiId:
    #       "Fn::ImportValue": "${self:custom.projectName}-${self:custom.stage}-ApiGatewayRestApiId"
    #     Type: COGNITO_USER_POOLS
    #     ProviderARNs:
    #       - {
    #           "Fn::Join":
    #             [
    #               "",
    #               [
    #                 "arn:aws:cognito-idp:",
    #                 { Ref: "AWS::Region" },
    #                 ":",
    #                 { Ref: "AWS::AccountId" },
    #                 ":userpool/",
    #                 Ref: IdentityUserPool,
    #               ],
    #             ],
    #         }


